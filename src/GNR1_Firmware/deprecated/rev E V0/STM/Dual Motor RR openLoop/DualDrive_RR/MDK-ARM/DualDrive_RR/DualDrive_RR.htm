<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [DualDrive_RR\DualDrive_RR.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image DualDrive_RR\DualDrive_RR.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Feb 17 11:40:22 2022
<BR><P>
<H3>Maximum Stack Usage =        520 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b6]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">NMI_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[19]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">DebugMon_Handler</a><BR>
 <LI><a href="#[59]">ADC4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">ADC4_IRQHandler</a><BR>
 <LI><a href="#[86]">StartSafetyTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[86]">StartSafetyTask</a><BR>
 <LI><a href="#[87]">StartVehicleTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[87]">StartVehicleTask</a><BR>
 <LI><a href="#[85]">startMediumFrequencyTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">startMediumFrequencyTask</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e]">ADC1_2_IRQHandler</a> from stm32g4xx_mc_it.o(i.ADC1_2_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4b]">ADC3_IRQHandler</a> from stm32g4xx_mc_it.o(i.ADC3_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[59]">ADC4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5a]">ADC5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5c]">COMP1_2_3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5d]">COMP4_5_6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5e]">COMP7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[77]">CORDIC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5f]">CRS_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[11]">DAC_Exec</a> from dac_ui.o(i.DAC_Exec) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[d]">DAC_GetChannelConfig</a> from dac_common_ui.o(i.DAC_GetChannelConfig) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[f]">DAC_GetUserChannelValue</a> from dac_common_ui.o(i.DAC_GetUserChannelValue) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[10]">DAC_Init</a> from dac_ui.o(i.DAC_Init) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[c]">DAC_SetChannelConfig</a> from dac_common_ui.o(i.DAC_SetChannelConfig) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[e]">DAC_SetUserChannelValue</a> from dac_common_ui.o(i.DAC_SetUserChannelValue) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[27]">DMA1_Channel1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[28]">DMA1_Channel2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[29]">DMA1_Channel3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[73]">DMA1_Channel8_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[54]">DMA2_Channel1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[55]">DMA2_Channel2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[56]">DMA2_Channel3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[57]">DMA2_Channel4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[58]">DMA2_Channel5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[74]">DMA2_Channel6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[75]">DMA2_Channel7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[76]">DMA2_Channel8_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[71]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[22]">EXTI0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[44]">EXTI15_10_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[23]">EXTI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[24]">EXTI2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[25]">EXTI3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[26]">EXTI4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[33]">EXTI9_5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[31]">FDCAN1_IT0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[32]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[69]">FDCAN2_IT0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6a]">FDCAN2_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6b]">FDCAN3_IT0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6c]">FDCAN3_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[20]">FLASH_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[78]">FMAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4c]">FMC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[65]">FPU_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from stm32g4xx_mc_it.o(i.HardFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3c]">I2C1_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3e]">I2C2_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3d]">I2C2_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[70]">I2C3_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6f]">I2C3_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[67]">I2C4_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[66]">I2C4_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6]">ICS_CurrentReadingPolarization</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[b]">ICS_CurrentReadingPolarization_Alt</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization_Alt) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[3]">ICS_GetPhaseCurrents</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_GetPhaseCurrents) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[3]">ICS_GetPhaseCurrents</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_GetPhaseCurrents) referenced from ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization)
 <LI><a href="#[a]">ICS_GetPhaseCurrents_Alt</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_GetPhaseCurrents_Alt) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[a]">ICS_GetPhaseCurrents_Alt</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_GetPhaseCurrents_Alt) referenced from ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization_Alt)
 <LI><a href="#[7b]">ICS_HFCurrentsPolarization</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_HFCurrentsPolarization) referenced from ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization)
 <LI><a href="#[7c]">ICS_HFCurrentsPolarization_Alt</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_HFCurrentsPolarization_Alt) referenced from ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization_Alt)
 <LI><a href="#[9]">ICS_IsOverCurrentOccurred</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_IsOverCurrentOccurred) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[4]">ICS_SwitchOffPWM</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_SwitchOffPWM) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[5]">ICS_SwitchOnPWM</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_SwitchOnPWM) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[7]">ICS_TurnOnLowSides</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_TurnOnLowSides) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[8]">ICS_WriteTIMRegisters</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_WriteTIMRegisters) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[8]">ICS_WriteTIMRegisters</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_WriteTIMRegisters) referenced from ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization)
 <LI><a href="#[8]">ICS_WriteTIMRegisters</a> from ics_g4xx_pwm_curr_fdbk.o(i.ICS_WriteTIMRegisters) referenced from ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization_Alt)
 <LI><a href="#[4d]">LPTIM1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6e]">LPUART1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[7d]">MCP_OnTimeOut</a> from motor_control_protocol.o(i.MCP_OnTimeOut) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[7e]">MCP_ReceivedFrame</a> from motor_control_protocol.o(i.MCP_ReceivedFrame) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[7f]">MCP_SentFrame</a> from motor_control_protocol.o(i.MCP_SentFrame) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[15]">MemManage_Handler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1d]">PVD_PVM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[72]">QUADSPI_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[21]">RCC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6d]">RNG_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[45]">RTC_Alarm_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1e]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1f]">RTC_WKUP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3f]">SPI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[40]">SPI2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4f]">SPI3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[68]">SPI4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[86]">StartSafetyTask</a> from mc_tasks.o(i.StartSafetyTask) referenced from main.o(.constdata)
 <LI><a href="#[87]">StartVehicleTask</a> from main.o(i.StartVehicleTask) referenced from main.o(.constdata)
 <LI><a href="#[1b]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[79]">SystemInit</a> from system_stm32g4xx.o(i.SystemInit) referenced from startup_stm32g473xx.o(.text)
 <LI><a href="#[34]">TIM1_BRK_TIM15_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM1_BRK_TIM15_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[35]">TIM1_UP_TIM16_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[61]">TIM20_BRK_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[64]">TIM20_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[63]">TIM20_TRG_COM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[62]">TIM20_UP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM2_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM4_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4e]">TIM5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[52]">TIM6_DAC_IRQHandler</a> from stm32g4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[53]">TIM7_DAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[47]">TIM8_BRK_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM8_BRK_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4a]">TIM8_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[49]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[48]">TIM8_UP_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM8_UP_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5b]">UCPD1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[80]">UFCP_AbortReceive</a> from usart_frame_communication_protocol.o(i.UFCP_AbortReceive) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[81]">UFCP_Receive</a> from usart_frame_communication_protocol.o(i.UFCP_Receive) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[82]">UFCP_Send</a> from usart_frame_communication_protocol.o(i.UFCP_Send) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[41]">USART1_IRQHandler</a> from stm32g4xx_mc_it.o(i.USART1_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[42]">USART2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[43]">USART3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[46]">USBWakeUp_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2f]">USB_HP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[30]">USB_LP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1c]">WWDG_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[88]">__main</a> from __main.o(!!!main) referenced from startup_stm32g473xx.o(.text)
 <LI><a href="#[84]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[83]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[85]">startMediumFrequencyTask</a> from mc_tasks.o(i.startMediumFrequencyTask) referenced from main.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[88]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[89]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1db]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1dc]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1dd]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1de]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1df]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[91]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1e0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1e1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1e2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1e4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1f4]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1f5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1f6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1f7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1f8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1f9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1fa]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1fb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[90]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1fc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[92]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1fd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b7]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[95]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1fe]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[97]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[16e]"></a>FF_VqdConditioning</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, feed_forward_ctrl.o(.ccmram))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FF_VqdConditioning
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[173]"></a>FF_DataProcess</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, feed_forward_ctrl.o(.ccmram))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[172]"></a>FW_DataProcess</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, flux_weakening_ctrl.o(.ccmram))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1cf]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1ce]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1ff]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>ADC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>FDCAN3_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>FDCAN3_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM20_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM20_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM20_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM7_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[142]"></a>FF_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, feed_forward_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[c1]"></a>FF_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feed_forward_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[9a]"></a>FF_VqdffComputation</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, feed_forward_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FF_VqdffComputation
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElSpeedDpp
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
</UL>

<P><STRONG><a name="[9e]"></a>FF_InitFOCAdditionalMethods</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, feed_forward_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FF_InitFOCAdditionalMethods
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitAdditionalMethods
</UL>

<P><STRONG><a name="[1ad]"></a>FF_SetFFConstants</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feed_forward_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[197]"></a>FF_GetFFConstants</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, feed_forward_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[198]"></a>FF_GetVqdff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, feed_forward_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[199]"></a>FF_GetVqdAvPIout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, feed_forward_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[141]"></a>FW_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flux_weakening_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[a0]"></a>FW_Clear</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, flux_weakening_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[a1]"></a>FW_CalcCurrRef</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, flux_weakening_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Sqrt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisor
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetUpperIntegralTermLimit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetLowerIntegralTermLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
</UL>

<P><STRONG><a name="[1ab]"></a>FW_SetVref</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flux_weakening_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[193]"></a>FW_GetVref</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flux_weakening_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[200]"></a>FW_GetAvVAmplitude</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flux_weakening_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>FW_GetAvVPercentage</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, flux_weakening_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[201]"></a>RUC_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, revup_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>RUC_Clear</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, revup_ctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAngle
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
</UL>

<P><STRONG><a name="[ad]"></a>RUC_OTF_Exec</STRONG> (Thumb, 514 bytes, Stack size 40 bytes, revup_ctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_TurnOnLowSides
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOnPWM
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetCopyObserver
</UL>

<P><STRONG><a name="[b3]"></a>RUC_Exec</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, revup_ctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
</UL>

<P><STRONG><a name="[202]"></a>RUC_Completed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, revup_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>RUC_Stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, revup_ctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
</UL>

<P><STRONG><a name="[1ae]"></a>RUC_SetPhaseDurationms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[1af]"></a>RUC_SetPhaseFinalMecSpeedUnit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[1b0]"></a>RUC_SetPhaseFinalTorque</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[1a2]"></a>RUC_GetPhaseDurationms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[1a3]"></a>RUC_GetPhaseFinalMecSpeedUnit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, revup_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[1a4]"></a>RUC_GetPhaseFinalTorque</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, revup_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[19d]"></a>RUC_GetNumberOfPhases</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, revup_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[203]"></a>RUC_Get_SCLowsideOTF_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, revup_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[204]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[94]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[20b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[20d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADC1_2_IRQHandler &rArr; TSK_HighFrequencyTask &rArr; RCM_ExecNextConv
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetUserChannelValue
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ADC3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.ADC3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADC3_IRQHandler &rArr; TSK_HighFrequencyTask &rArr; RCM_ExecNextConv
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>AO_CalcElAngle</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, ao_spd_pos_fdbk.o(i.AO_CalcElAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AO_CalcElAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[177]"></a>AO_Clear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ao_spd_pos_fdbk.o(i.AO_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[169]"></a>AO_GetElAngle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ao_spd_pos_fdbk.o(i.AO_GetElAngle))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[147]"></a>AO_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ao_spd_pos_fdbk.o(i.AO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[16f]"></a>Circle_Limitation</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, circle_limitation.o(i.Circle_Limitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Circle_Limitation
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[11]"></a>DAC_Exec</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dac_ui.o(i.DAC_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DAC_Exec &rArr; UI_GetReg &rArr; MCI_GetAvrgMecSpeedUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>DAC_GetChannelConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac_common_ui.o(i.DAC_GetChannelConfig))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>DAC_GetUserChannelValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dac_common_ui.o(i.DAC_GetUserChannelValue))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>DAC_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dac_ui.o(i.DAC_Init))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>DAC_SetChannelConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac_common_ui.o(i.DAC_SetChannelConfig))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>DAC_SetUserChannelValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac_common_ui.o(i.DAC_SetUserChannelValue))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[186]"></a>FCP_CalcCRC</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, frame_communication_protocol.o(i.FCP_CalcCRC))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
</UL>

<P><STRONG><a name="[185]"></a>FCP_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, frame_communication_protocol.o(i.FCP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Init
</UL>

<P><STRONG><a name="[124]"></a>FCP_SetClient</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, frame_communication_protocol.o(i.FCP_SetClient))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_Init
</UL>

<P><STRONG><a name="[bd]"></a>FOC_CalcCurrRef</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mc_tasks.o(i.FOC_CalcCurrRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_VqdffComputation
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[bf]"></a>FOC_Clear</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, mc_tasks.o(i.FOC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOC_Clear &rArr; FW_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[c2]"></a>FOC_InitAdditionalMethods</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_tasks.o(i.FOC_InitAdditionalMethods))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FOC_InitAdditionalMethods &rArr; FF_InitFOCAdditionalMethods
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_InitFOCAdditionalMethods
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[174]"></a>HALL_CalcAvrgMecSpeedUnit</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, hall_speed_pos_fdbk.o(i.HALL_CalcAvrgMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[167]"></a>HALL_CalcElAngle</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, hall_speed_pos_fdbk.o(i.HALL_CalcElAngle))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[c3]"></a>HALL_Clear</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, hall_speed_pos_fdbk.o(i.HALL_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HALL_Clear &rArr; HALL_Init_Electrical_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init_Electrical_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[13d]"></a>HALL_Init</STRONG> (Thumb, 426 bytes, Stack size 12 bytes, hall_speed_pos_fdbk.o(i.HALL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HALL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[c5]"></a>HALL_TIMx_CC_IRQHandler</STRONG> (Thumb, 804 bytes, Stack size 32 bytes, hall_speed_pos_fdbk.o(i.HALL_TIMx_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HALL_TIMx_CC_IRQHandler &rArr; HALL_Init_Electrical_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init_Electrical_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HALL_TIMx_UP_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, hall_speed_pos_fdbk.o(i.HALL_TIMx_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HALL_TIMx_UP_IRQHandler &rArr; HALL_Init_Electrical_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init_Electrical_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_ADCEx_InjectedConfigChannel</STRONG> (Thumb, 1534 bytes, Stack size 36 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ADCEx_InjectedConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_ADCEx_MultiModeConfigChannel</STRONG> (Thumb, 370 bytes, Stack size 136 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_MultiModeConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 1256 bytes, Stack size 48 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>HAL_ADC_Init</STRONG> (Thumb, 614 bytes, Stack size 32 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, stm32g4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_COMP_Init</STRONG> (Thumb, 608 bytes, Stack size 56 bytes, stm32g4xx_hal_comp.o(i.HAL_COMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_COMP_Init &rArr; HAL_COMP_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>HAL_COMP_MspInit</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32g4xx_hal_msp.o(i.HAL_COMP_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_COMP_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_CORDIC_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32g4xx_hal_cordic.o(i.HAL_CORDIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CORDIC_Init &rArr; HAL_CORDIC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CORDIC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>HAL_CORDIC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, stm32g4xx_hal_msp.o(i.HAL_CORDIC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CORDIC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CORDIC_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_DACEx_DMAUnderrunCallbackCh2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_dac_ex.o(i.HAL_DACEx_DMAUnderrunCallbackCh2))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, stm32g4xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DAC_ConfigChannel &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>HAL_DAC_DMAUnderrunCallbackCh1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_dac.o(i.HAL_DAC_DMAUnderrunCallbackCh1))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_DAC_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32g4xx_hal_dac.o(i.HAL_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_DMAUnderrunCallbackCh1
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DACEx_DMAUnderrunCallbackCh2
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32g4xx_hal_msp.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_Delay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32g4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>HAL_GPIO_Init</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_MspInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[cf]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[fe]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[d9]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>HAL_InitTick</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stm32g4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_MspInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32g4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>

<P><STRONG><a name="[d7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>

<P><STRONG><a name="[da]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[161]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e1]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(i.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[e2]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 826 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e3]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[162]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_EnableCSS))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[de]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[183]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1226 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_TIMEx_ConfigBreakInput</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_ConfigBreakInput
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIMEx_DirectionChangeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_DirectionChangeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_TIMEx_EncoderIndexCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_EncoderIndexCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_TIMEx_HallSensor_Init</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_HallSensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_TIMEx_HallSensor_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>HAL_TIMEx_HallSensor_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_HallSensor_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIMEx_IndexErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_IndexErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIMEx_TransitionErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_TransitionErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, stm32g4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 414 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_TransitionErrorCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_IndexErrorCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_EncoderIndexCallback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_DirectionChangeCallback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, stm32g4xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 756 bytes, Stack size 40 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIM_SlaveConfigSynchro</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_SlaveConfigSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_SlaveConfigSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>HAL_UART_MspInit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stm32g4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; UFCP_RX_IRQ_Handler &rArr; UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStop
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStart
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_TX_IRQ_Handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>ICS_BRK2_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_BRK2_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>ICS_BRK_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_BRK_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[6]"></a>ICS_CurrentReadingPolarization</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ICS_CurrentReadingPolarization &rArr; waitForPolarizationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SwitchOnPWM
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SwitchOffPWM
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForPolarizationEnd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ICS_CurrentReadingPolarization_Alt</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization_Alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ICS_CurrentReadingPolarization_Alt &rArr; waitForPolarizationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SwitchOnPWM
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SwitchOffPWM
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForPolarizationEnd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>ICS_GetPhaseCurrents</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_GetPhaseCurrents))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ICS_GetPhaseCurrents
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization)
</UL>
<P><STRONG><a name="[a]"></a>ICS_GetPhaseCurrents_Alt</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_GetPhaseCurrents_Alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ICS_GetPhaseCurrents_Alt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization_Alt)
</UL>
<P><STRONG><a name="[10e]"></a>ICS_Init</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ICS_Init &rArr; R3_2_SetAOReferenceVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SetAOReferenceVoltage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_ADCxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[9]"></a>ICS_IsOverCurrentOccurred</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_IsOverCurrentOccurred))
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ICS_SwitchOffPWM</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_SwitchOffPWM))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_CurrentReadingPolarization_Alt
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_CurrentReadingPolarization
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>ICS_SwitchOnPWM</STRONG> (Thumb, 186 bytes, Stack size 4 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_SwitchOnPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ICS_SwitchOnPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_CurrentReadingPolarization_Alt
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_CurrentReadingPolarization
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[165]"></a>ICS_TIMx_UP_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_TIMx_UP_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>ICS_TurnOnLowSides</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_TurnOnLowSides))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ICS_WriteTIMRegisters</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_WriteTIMRegisters))
<BR>[Address Reference Count : 4]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
<LI> ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization)
<LI> ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization_Alt)
</UL>
<P><STRONG><a name="[111]"></a>MCI_Clear_Iqdref</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_Clear_Iqdref))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_Clear_Iqdref
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[113]"></a>MCI_EncoderAlign</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_EncoderAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_EncoderAlign &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[115]"></a>MCI_ExecBufferedCommands</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_ExecBufferedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCI_ExecBufferedCommands &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[146]"></a>MCI_ExecSpeedRamp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_ExecSpeedRamp))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecSpeedRamp
</UL>

<P><STRONG><a name="[189]"></a>MCI_ExecTorqueRamp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_ExecTorqueRamp))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecTorqueRamp
</UL>

<P><STRONG><a name="[116]"></a>MCI_FaultAcknowledged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_FaultAcknowledged))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultAcknowledged
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[118]"></a>MCI_GetAvrgMecSpeedUnit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_GetAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_GetAvrgMecSpeedUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[190]"></a>MCI_GetControlMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[19e]"></a>MCI_GetIab</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIab))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[19f]"></a>MCI_GetIalphabeta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIalphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[19c]"></a>MCI_GetIqd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIqd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[18f]"></a>MCI_GetIqdref</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[191]"></a>MCI_GetLastRampFinalSpeed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetLastRampFinalSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[119]"></a>MCI_GetMecSpeedRefUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetMecSpeedRefUnit))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRefUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[11b]"></a>MCI_GetSTMState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetSTMState))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[1aa]"></a>MCI_GetTeref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetTeref))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[1a1]"></a>MCI_GetValphabeta</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetValphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[1a0]"></a>MCI_GetVqd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetVqd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[144]"></a>MCI_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[1a5]"></a>MCI_SetCurrentReferences</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_SetCurrentReferences))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetCurrentReferences
</UL>

<P><STRONG><a name="[1ac]"></a>MCI_SetIdref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_SetIdref))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[11d]"></a>MCI_StartMotor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_StartMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCI_StartMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[11e]"></a>MCI_StopMotor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_StopMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[11f]"></a>MCI_StopRamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_StopRamp))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_StopRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[16d]"></a>MCM_Clarke</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, mc_math.o(i.MCM_Clarke))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[121]"></a>MCM_Park</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mc_math.o(i.MCM_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCM_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[122]"></a>MCM_Rev_Park</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mc_math.o(i.MCM_Rev_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCM_Rev_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[a2]"></a>MCM_Sqrt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mc_math.o(i.MCM_Sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
</UL>

<P><STRONG><a name="[bb]"></a>MCM_Trig_Functions</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_math.o(i.MCM_Trig_Functions))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO_CalcElAngle
</UL>

<P><STRONG><a name="[123]"></a>MCP_Init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, motor_control_protocol.o(i.MCP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCP_Init &rArr; MCP_WaitNextFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_WaitNextFrame
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_SetClient
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[7d]"></a>MCP_OnTimeOut</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motor_control_protocol.o(i.MCP_OnTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCP_OnTimeOut &rArr; MCP_WaitNextFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_WaitNextFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[7e]"></a>MCP_ReceivedFrame</STRONG> (Thumb, 1770 bytes, Stack size 72 bytes, motor_control_protocol.o(i.MCP_ReceivedFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MCP_ReceivedFrame &rArr; UI_SetReg
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetDAC
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetCurrentReferences
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetMPInfo
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetDAC
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecTorqueRamp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecSpeedRamp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[7f]"></a>MCP_SentFrame</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motor_control_protocol.o(i.MCP_SentFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCP_SentFrame &rArr; MCP_WaitNextFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_WaitNextFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[125]"></a>MCP_WaitNextFrame</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motor_control_protocol.o(i.MCP_WaitNextFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCP_WaitNextFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_SentFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_OnTimeOut
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_Init
</UL>

<P><STRONG><a name="[130]"></a>MC_RunMotorControlTasks</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mc_tasks.o(i.MC_RunMotorControlTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; TSK_MediumFrequencyTaskM2 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMediumFrequencyTask
</UL>

<P><STRONG><a name="[131]"></a>MC_Scheduler</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, mc_tasks.o(i.MC_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MC_Scheduler &rArr; TSK_MediumFrequencyTaskM2 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>MCboot</STRONG> (Thumb, 840 bytes, Stack size 48 bytes, mc_tasks.o(i.MCboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MCboot &rArr; ICS_Init &rArr; R3_2_SetAOReferenceVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimers
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRefUnitDefault
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_HandleInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[152]"></a>MPM_CalcElMotorPower</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, motor_power_measurement.o(i.MPM_CalcElMotorPower))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
</UL>

<P><STRONG><a name="[178]"></a>MPM_Clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motor_power_measurement.o(i.MPM_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[195]"></a>MPM_GetAvrgElMotorPowerW</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_power_measurement.o(i.MPM_GetAvrgElMotorPowerW))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[148]"></a>MX_MotorControl_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, motorcontrol.o(i.MX_MotorControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_MotorControl_Init &rArr; UI_TaskInit &rArr; MCP_Init &rArr; MCP_WaitNextFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_pins
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>NTC_CalcAvTemp</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ntc_temperature_sensor.o(i.NTC_CalcAvTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NTC_CalcAvTemp &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_SetFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[14f]"></a>NTC_Clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(i.NTC_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
</UL>

<P><STRONG><a name="[18e]"></a>NTC_GetAvTemp_C</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(i.NTC_GetAvTemp_C))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[140]"></a>NTC_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ntc_temperature_sensor.o(i.NTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NTC_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[14d]"></a>NTC_SetFaultState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(i.NTC_SetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
</UL>

<P><STRONG><a name="[18d]"></a>PID_GetKD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKD))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[18c]"></a>PID_GetKI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKI))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[a4]"></a>PID_GetKIDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKIDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[18b]"></a>PID_GetKP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKP))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[192]"></a>PID_GetKPDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKPDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[13c]"></a>PID_HandleInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_HandleInit))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[9f]"></a>PID_SetIntegralTerm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetIntegralTerm))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Clear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_InitFOCAdditionalMethods
</UL>

<P><STRONG><a name="[1a9]"></a>PID_SetKD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKD))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[1a8]"></a>PID_SetKI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKI))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[1a7]"></a>PID_SetKP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKP))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[a5]"></a>PID_SetLowerIntegralTermLimit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetLowerIntegralTermLimit))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
</UL>

<P><STRONG><a name="[a6]"></a>PID_SetUpperIntegralTermLimit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetUpperIntegralTermLimit))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
</UL>

<P><STRONG><a name="[a3]"></a>PI_Controller</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, pid_regulator.o(i.PI_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
</UL>

<P><STRONG><a name="[150]"></a>PQD_CalcElMotorPower</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pqd_motor_power_measurement.o(i.PQD_CalcElMotorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PQD_CalcElMotorPower
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_CalcElMotorPower
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[180]"></a>PWMC_CheckOverCurrent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_CheckOverCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[153]"></a>PWMC_CurrentReadingCalibr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pwm_curr_fdbk.o(i.PWMC_CurrentReadingCalibr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMC_CurrentReadingCalibr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[16a]"></a>PWMC_GetPhaseCurrents</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_GetPhaseCurrents))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[171]"></a>PWMC_SetPhaseVoltage</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, pwm_curr_fdbk.o(i.PWMC_SetPhaseVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_SetPhaseVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[b0]"></a>PWMC_SwitchOffPWM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_SwitchOffPWM))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_OTF_Exec
</UL>

<P><STRONG><a name="[b2]"></a>PWMC_SwitchOnPWM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_SwitchOnPWM), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_OTF_Exec
</UL>

<P><STRONG><a name="[b1]"></a>PWMC_TurnOnLowSides</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_TurnOnLowSides), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_OTF_Exec
</UL>

<P><STRONG><a name="[16c]"></a>RCM_ExecNextConv</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, regular_conversion_manager.o(i.RCM_ExecNextConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCM_ExecNextConv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[14c]"></a>RCM_ExecRegularConv</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, regular_conversion_manager.o(i.RCM_ExecRegularConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
</UL>

<P><STRONG><a name="[154]"></a>RCM_ExecUserConv</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, regular_conversion_manager.o(i.RCM_ExecUserConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCM_ExecUserConv &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
</UL>

<P><STRONG><a name="[16b]"></a>RCM_ReadOngoingConv</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, regular_conversion_manager.o(i.RCM_ReadOngoingConv))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[14e]"></a>RCM_RegisterRegConv</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, regular_conversion_manager.o(i.RCM_RegisterRegConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
</UL>

<P><STRONG><a name="[143]"></a>REMNG_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ramp_ext_mngr.o(i.REMNG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[155]"></a>RVBS_CalcAvVbus</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_CalcAvVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CheckFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[156]"></a>RVBS_CheckFaultState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_CheckFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
</UL>

<P><STRONG><a name="[157]"></a>RVBS_Clear</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
</UL>

<P><STRONG><a name="[13f]"></a>RVBS_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RVBS_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[ae]"></a>SPD_GetAvrgMecSpeedUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetAvrgMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_OTF_Exec
</UL>

<P><STRONG><a name="[168]"></a>SPD_GetElAngle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetElAngle))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[9c]"></a>SPD_GetElSpeedDpp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetElSpeedDpp))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_VqdffComputation
</UL>

<P><STRONG><a name="[170]"></a>SPD_GetInstElSpeedDpp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetInstElSpeedDpp))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[196]"></a>SPD_GetS16Speed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetS16Speed))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[be]"></a>STC_CalcTorqueReference</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, speed_torq_ctrl.o(i.STC_CalcTorqueReference))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STC_CalcTorqueReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
</UL>

<P><STRONG><a name="[c0]"></a>STC_Clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[ab]"></a>STC_ExecRamp</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, speed_torq_ctrl.o(i.STC_ExecRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetTorqueRef
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_OTF_Exec
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[159]"></a>STC_ForceSpeedReferenceToCurrentSpeed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, speed_torq_ctrl.o(i.STC_ForceSpeedReferenceToCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_ForceSpeedReferenceToCurrentSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[112]"></a>STC_GetDefaultIqdref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetDefaultIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
</UL>

<P><STRONG><a name="[19a]"></a>STC_GetMaxAppPositiveMecSpeedUnit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMaxAppPositiveMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[11a]"></a>STC_GetMecSpeedRefUnit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMecSpeedRefUnit))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
</UL>

<P><STRONG><a name="[145]"></a>STC_GetMecSpeedRefUnitDefault</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMecSpeedRefUnitDefault))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[19b]"></a>STC_GetMinAppNegativeMecSpeedUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMinAppNegativeMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[9b]"></a>STC_GetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_VqdffComputation
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[158]"></a>STC_GetTorqueRef</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetTorqueRef))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>

<P><STRONG><a name="[13e]"></a>STC_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[a9]"></a>STC_SetControlMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[120]"></a>STC_StopRamp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_StopRamp))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopRamp
</UL>

<P><STRONG><a name="[117]"></a>STM_FaultAcknowledged</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, state_machine.o(i.STM_FaultAcknowledged))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
</UL>

<P><STRONG><a name="[15a]"></a>STM_FaultProcessing</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, state_machine.o(i.STM_FaultProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>

<P><STRONG><a name="[18a]"></a>STM_GetFaultState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state_machine.o(i.STM_GetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[11c]"></a>STM_GetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, state_machine.o(i.STM_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
</UL>

<P><STRONG><a name="[13a]"></a>STM_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state_machine.o(i.STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[114]"></a>STM_NextState</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, state_machine.o(i.STM_NextState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EncoderAlign
</UL>

<P><STRONG><a name="[86]"></a>StartSafetyTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_tasks.o(i.StartSafetyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = StartSafetyTask &rArr;  StartSafetyTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSafetyTask
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSafetyTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>StartVehicleTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.StartVehicleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = StartVehicleTask &rArr;  StartVehicleTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVehicleTask
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVehicleTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>SystemClock_Config</STRONG> (Thumb, 160 bytes, Stack size 176 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_EnableCSS
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32g4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.TIM1_BRK_TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = TIM1_BRK_TIM15_IRQHandler &rArr; MC_Scheduler &rArr; TSK_MediumFrequencyTaskM2 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_BRK_IRQHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_BRK2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_UP_TIM16_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_DualDriveFIFOUpdate
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_TIMx_UP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIM2_IRQHandler &rArr; HALL_TIMx_CC_IRQHandler &rArr; HALL_Init_Electrical_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_TIMx_UP_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_TIMx_CC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIM4_IRQHandler &rArr; HALL_TIMx_CC_IRQHandler &rArr; HALL_Init_Electrical_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_TIMx_UP_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_TIMx_CC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32g4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.TIM8_BRK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = TIM8_BRK_IRQHandler &rArr; MC_Scheduler &rArr; TSK_MediumFrequencyTaskM2 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_BRK_IRQHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_BRK2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.TIM8_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM8_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_DualDriveFIFOUpdate
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_TIMx_UP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 28 bytes, stm32g4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[ea]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[e9]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[176]"></a>TSK_ChargeBootCapDelayHasElapsedM1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_ChargeBootCapDelayHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[17c]"></a>TSK_ChargeBootCapDelayHasElapsedM2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_ChargeBootCapDelayHasElapsedM2))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[166]"></a>TSK_DualDriveFIFOUpdate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_DualDriveFIFOUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>TSK_HardwareFaultTask</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_HardwareFaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSK_HardwareFaultTask
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[b8]"></a>TSK_HighFrequencyTask</STRONG> (Thumb, 676 bytes, Stack size 80 bytes, mc_tasks.o(i.TSK_HighFrequencyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TSK_HighFrequencyTask &rArr; RCM_ExecNextConv
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetInstElSpeedDpp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadOngoingConv
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecNextConv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetPhaseVoltage
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_GetPhaseCurrents
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Clarke
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_CalcElAngle
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DataProcess
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_VqdConditioning
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DataProcess
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Limitation
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO_GetElAngle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO_CalcElAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>TSK_MediumFrequencyTaskM1</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_MediumFrequencyTaskM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TSK_MediumFrequencyTaskM1 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_StopPermanencyTimeHasElapsedM1
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetStopPermanencyTimeM1
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetChargeBootCapDelayM1
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ChargeBootCapDelayHasElapsedM1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitAdditionalMethods
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Clear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_CalcAvrgMecSpeedUnit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO_Clear
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_TurnOnLowSides
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SwitchOnPWM
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[138]"></a>TSK_MediumFrequencyTaskM2</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_MediumFrequencyTaskM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TSK_MediumFrequencyTaskM2 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_StopPermanencyTimeHasElapsedM2
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetStopPermanencyTimeM2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetChargeBootCapDelayM2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ChargeBootCapDelayHasElapsedM2
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitAdditionalMethods
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Clear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_CalcAvrgMecSpeedUnit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO_Clear
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_TurnOnLowSides
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SwitchOnPWM
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[15c]"></a>TSK_SafetyTask</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_SafetyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TSK_SafetyTask &rArr; TSK_SafetyTask_PWMOFF &rArr; RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSafetyTask
</UL>

<P><STRONG><a name="[17f]"></a>TSK_SafetyTask_PWMOFF</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mc_tasks.o(i.TSK_SafetyTask_PWMOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSK_SafetyTask_PWMOFF &rArr; RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CheckOverCurrent
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
</UL>

<P><STRONG><a name="[175]"></a>TSK_SetChargeBootCapDelayM1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetChargeBootCapDelayM1))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[17b]"></a>TSK_SetChargeBootCapDelayM2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetChargeBootCapDelayM2))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[179]"></a>TSK_SetStopPermanencyTimeM1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetStopPermanencyTimeM1))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[17d]"></a>TSK_SetStopPermanencyTimeM2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetStopPermanencyTimeM2))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[17a]"></a>TSK_StopPermanencyTimeHasElapsedM1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_StopPermanencyTimeHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[17e]"></a>TSK_StopPermanencyTimeHasElapsedM2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_StopPermanencyTimeHasElapsedM2))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[104]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[105]"></a>UART_CheckIdleState</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[103]"></a>UART_SetConfig</STRONG> (Thumb, 656 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[181]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[80]"></a>UFCP_AbortReceive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_AbortReceive))
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[184]"></a>UFCP_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_Init))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[107]"></a>UFCP_OVR_IRQ_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_OVR_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UFCP_OVR_IRQ_Handler &rArr; UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[10a]"></a>UFCP_RX_IRQ_Handler</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, usart_frame_communication_protocol.o(i.UFCP_RX_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UFCP_RX_IRQ_Handler &rArr; UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[81]"></a>UFCP_Receive</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_Receive))
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[82]"></a>UFCP_Send</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[109]"></a>UFCP_TX_IRQ_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_TX_IRQ_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[188]"></a>UI_DACExec</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_interface.o(i.UI_DACExec))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACUpdate
</UL>

<P><STRONG><a name="[1b2]"></a>UI_DACInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_interface.o(i.UI_DACInit))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[b9]"></a>UI_DACUpdate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ui_task.o(i.UI_DACUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UI_DACUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetSelectedMC
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACExec
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>UI_ExecCmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, user_interface.o(i.UI_ExecCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UI_ExecCmd &rArr; MCI_StartMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopRamp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EncoderAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[12a]"></a>UI_ExecSpeedRamp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, user_interface.o(i.UI_ExecSpeedRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI_ExecSpeedRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[12b]"></a>UI_ExecTorqueRamp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user_interface.o(i.UI_ExecTorqueRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI_ExecTorqueRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[128]"></a>UI_GetDAC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, user_interface.o(i.UI_GetDAC))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[12f]"></a>UI_GetMPInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_interface.o(i.UI_GetMPInfo))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[bc]"></a>UI_GetReg</STRONG> (Thumb, 1108 bytes, Stack size 32 bytes, user_interface.o(i.UI_GetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UI_GetReg &rArr; MCI_GetAvrgMecSpeedUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetDAC
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetVqd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetValphabeta
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalSpeed
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIalphabeta
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIab
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetControlMode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMinAppNegativeMecSpeedUnit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMaxAppPositiveMecSpeedUnit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetS16Speed
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetNumberOfPhases
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKPDivisor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKP
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisor
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKI
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKD
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_GetAvTemp_C
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_GetAvrgElMotorPowerW
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GetVref
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GetAvVPercentage
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetVqdff
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetVqdAvPIout
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetFFConstants
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetSelectedMC
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Exec
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[12c]"></a>UI_GetRevupData</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, user_interface.o(i.UI_GetRevupData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UI_GetRevupData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseFinalTorque
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseFinalMecSpeedUnit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseDurationms
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[187]"></a>UI_GetSelectedMC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_interface.o(i.UI_GetSelectedMC))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACUpdate
</UL>

<P><STRONG><a name="[1b1]"></a>UI_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, user_interface.o(i.UI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[132]"></a>UI_Scheduler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ui_task.o(i.UI_Scheduler))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[1a6]"></a>UI_SelectMC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_interface.o(i.UI_SelectMC))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[10b]"></a>UI_SerialCommunicationTimeOutStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_task.o(i.UI_SerialCommunicationTimeOutStart))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[108]"></a>UI_SerialCommunicationTimeOutStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_task.o(i.UI_SerialCommunicationTimeOutStop))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[12e]"></a>UI_SetCurrentReferences</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, user_interface.o(i.UI_SetCurrentReferences))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCurrentReferences
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[127]"></a>UI_SetDAC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_interface.o(i.UI_SetDAC))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[126]"></a>UI_SetReg</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, user_interface.o(i.UI_SetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UI_SetReg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetIdref
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCurrentReferences
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetTeref
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SelectMC
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKP
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKI
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKD
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SetVref
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SetFFConstants
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetFFConstants
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[12d]"></a>UI_SetRevupData</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, user_interface.o(i.UI_SetRevupData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UI_SetRevupData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseFinalTorque
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseFinalMecSpeedUnit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseDurationms
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[14a]"></a>UI_TaskInit</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, ui_task.o(i.UI_TaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UI_TaskInit &rArr; MCP_Init &rArr; MCP_WaitNextFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetDAC
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[41]"></a>USART1_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; UFCP_RX_IRQ_Handler &rArr; UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStop
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStart
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_TX_IRQ_Handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>VBS_GetAvBusVoltage_V</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bus_voltage_sensor.o(i.VBS_GetAvBusVoltage_V))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[9d]"></a>VBS_GetAvBusVoltage_d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bus_voltage_sensor.o(i.VBS_GetAvBusVoltage_d))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_VqdffComputation
</UL>

<P><STRONG><a name="[a8]"></a>VSS_Clear</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_Clear), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[af]"></a>VSS_SetCopyObserver</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_SetCopyObserver), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_OTF_Exec
</UL>

<P><STRONG><a name="[ac]"></a>VSS_SetMecAcceleration</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, virtual_speed_sensor.o(i.VSS_SetMecAcceleration), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Stop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Exec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_OTF_Exec
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[aa]"></a>VSS_SetMecAngle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_SetMecAngle), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_Clear
</UL>

<P><STRONG><a name="[93]"></a>main</STRONG> (Thumb, 2854 bytes, Stack size 184 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakInput
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CORDIC_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[149]"></a>mc_lock_pins</STRONG> (Thumb, 422 bytes, Stack size 20 bytes, mc_tasks.o(i.mc_lock_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mc_lock_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[15d]"></a>osDelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartVehicleTask
</UL>

<P><STRONG><a name="[1be]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>osThreadCreate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>pvPortMalloc</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1d1]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[85]"></a>startMediumFrequencyTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_tasks.o(i.startMediumFrequencyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + In Cycle
<LI>Call Chain = startMediumFrequencyTask &rArr;  startMediumFrequencyTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMediumFrequencyTask
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMediumFrequencyTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>startTimers</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, pwm_common.o(i.startTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = startTimers
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[1c2]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1d2]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1d0]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1c4]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1c3]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1c5]"></a>vPortEnterCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1c6]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1c7]"></a>vPortFree</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1cb]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, motorcontrol.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[15b]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSafetyTask
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMediumFrequencyTask
</UL>

<P><STRONG><a name="[1bf]"></a>vTaskStartScheduler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1c9]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[99]"></a>vTaskSwitchContext</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[10c]"></a>waitForPolarizationEnd</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, pwm_common.o(i.waitForPolarizationEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = waitForPolarizationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_CurrentReadingPolarization_Alt
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_CurrentReadingPolarization
</UL>

<P><STRONG><a name="[1cd]"></a>xPortStartScheduler</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1c0]"></a>xTaskCreate</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[15e]"></a>xTaskIncrementTick</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ca]"></a>xTaskResumeAll</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[1d3]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[1d7]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[210]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[1d8]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d6]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1d5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[1d9]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[8d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[212]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[213]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[fb]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, stm32g4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[100]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.TIM_SlaveTimer_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
</UL>

<P><STRONG><a name="[1c1]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[84]"></a>prvIdleTask</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[83]"></a>prvTaskExitError</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[c4]"></a>HALL_Init_Electrical_Angle</STRONG> (Thumb, 208 bytes, Stack size 12 bytes, hall_speed_pos_fdbk.o(i.HALL_Init_Electrical_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HALL_Init_Electrical_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Clear
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_TIMx_UP_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_TIMx_CC_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>ICS_ADCxInit</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_ADCxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ICS_ADCxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[7b]"></a>ICS_HFCurrentsPolarization</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_HFCurrentsPolarization))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ICS_HFCurrentsPolarization
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization)
</UL>
<P><STRONG><a name="[7c]"></a>ICS_HFCurrentsPolarization_Alt</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, ics_g4xx_pwm_curr_fdbk.o(i.ICS_HFCurrentsPolarization_Alt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ICS_HFCurrentsPolarization_Alt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ics_g4xx_pwm_curr_fdbk.o(i.ICS_CurrentReadingPolarization_Alt)
</UL>
<P><STRONG><a name="[10d]"></a>LL_TIM_OC_EnablePreload</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, ics_g4xx_pwm_curr_fdbk.o(i.LL_TIM_OC_EnablePreload))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_CurrentReadingPolarization_Alt
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_CurrentReadingPolarization
</UL>

<P><STRONG><a name="[10f]"></a>R3_2_SetAOReferenceVoltage</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, ics_g4xx_pwm_curr_fdbk.o(i.R3_2_SetAOReferenceVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R3_2_SetAOReferenceVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[1da]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[1d4]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
